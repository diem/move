/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_NativeFunctions" {
    code {
        codecopy(0, dataoffset("A2_NativeFunctions_deployed"), datasize("A2_NativeFunctions_deployed"))
        return(0, datasize("A2_NativeFunctions_deployed"))
    }
    object "A2_NativeFunctions_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x90b6bab2
                {
                    // call_native_functions()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_NativeFunctions_call_native_functions()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_NativeFunctions_call_native_functions() {
                let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                // $t0 := U256::one()
                $t0 := A2_U256_one()
                // $t1 := Evm::blockhash($t0)
                $t1 := A2_Evm_blockhash($t0)
                // destroy($t1)
                // $t2 := Evm::block_basefee()
                $t2 := A2_Evm_block_basefee()
                // destroy($t2)
                $Free($t2, 0)
                // $t3 := Evm::block_chainid()
                $t3 := A2_Evm_block_chainid()
                // destroy($t3)
                $Free($t3, 0)
                // $t4 := Evm::block_coinbase()
                $t4 := A2_Evm_block_coinbase()
                // destroy($t4)
                // $t5 := Evm::block_difficulty()
                $t5 := A2_Evm_block_difficulty()
                // destroy($t5)
                $Free($t5, 0)
                // $t6 := Evm::block_gaslimit()
                $t6 := A2_Evm_block_gaslimit()
                // destroy($t6)
                $Free($t6, 0)
                // $t7 := Evm::block_number()
                $t7 := A2_Evm_block_number()
                // destroy($t7)
                $Free($t7, 0)
                // $t8 := Evm::block_timestamp()
                $t8 := A2_Evm_block_timestamp()
                // destroy($t8)
                $Free($t8, 0)
                // $t9 := Evm::gasleft()
                $t9 := A2_Evm_gasleft()
                // destroy($t9)
                $Free($t9, 0)
                // $t10 := Evm::msg_data()
                $t10 := A2_Evm_msg_data()
                // destroy($t10)
                // $t11 := Evm::msg_sender()
                $t11 := A2_Evm_msg_sender()
                // destroy($t11)
                // $t12 := Evm::msg_sig()
                $t12 := A2_Evm_msg_sig()
                // destroy($t12)
                // $t13 := Evm::msg_value()
                $t13 := A2_Evm_msg_value()
                // destroy($t13)
                $Free($t13, 0)
                // $t14 := Evm::tx_gasprice()
                $t14 := A2_Evm_tx_gasprice()
                // destroy($t14)
                $Free($t14, 0)
                // $t15 := Evm::tx_origin()
                $t15 := A2_Evm_tx_origin()
                // destroy($t15)
                // return ()
            }

            function A2_Evm_tx_origin() -> result {
              result := origin()
            }
            function A2_Evm_tx_gasprice() -> result {
              result := gasprice()
            }
            function A2_Evm_msg_value() -> result {
              result := callvalue()
            }
            function A2_Evm_msg_sig() -> result {
              result := timestamp()
            }
            function A2_Evm_msg_sender() -> result {
              result := caller()
            }
            function A2_Evm_msg_data() -> result {
              result := calldataload(0)
            }
            function A2_Evm_gasleft() -> result {
              result := gas()
            }
            function A2_Evm_block_timestamp() -> result {
              result := timestamp()
            }
            function A2_Evm_block_number() -> result {
              result := number()
            }
            function A2_Evm_block_gaslimit() -> result {
              result := gaslimit()
            }
            function A2_Evm_block_difficulty() -> result {
              result := difficulty()
            }
            function A2_Evm_block_coinbase() -> result {
              result := coinbase()
            }
            function A2_Evm_block_chainid() -> result {
              result := chainid()
            }
            function A2_Evm_block_basefee() -> result {
              result := basefee()
            }
            function A2_Evm_blockhash(block_number) -> hash {
              hash := blockhash(block_number)
            }
            function A2_U256_one() -> $result {
                let $t0
                // $t0 := 1
                $t0 := 1
                // return $t0
                $result := $t0
            }

            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Free(offs, size) {
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of NativeFunctions::test_signer_address_of
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_NativeFunctions_test_signer_address_of" {
    code {
        mstore(0, memoryguard(160))
        A2_NativeFunctions_test_signer_address_of()
        return (0, 0)
        function A2_NativeFunctions_test_signer_address_of() {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t6 := 101
                    $t6 := 101
                    // abort($t6)
                    $Abort($t6)
                }
                case 3 {
                    // label L0
                    // return ()
                    $Free($locals, 32)
                    leave
                }
                case 4 {
                    // $t1 := 0x42
                    $t1 := 0x42
                    // $t0 := Evm::sign($t1)
                    mstore($locals, A2_Evm_sign($t1))
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, $locals)
                    // $t3 := Signer::address_of($t2)
                    $t3 := A1_Signer_address_of($t2)
                    // $t4 := 0x42
                    $t4 := 0x42
                    // $t5 := ==($t3, $t4)
                    $t5 := $Eq($t3, $t4)
                    // if ($t5) goto L0 else goto L1
                    switch $t5
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A1_Signer_address_of(s) -> $result {
            let $t1, $t2
            // $t1 := Signer::borrow_address($t0)
            $t1 := A1_Signer_borrow_address(s)
            // $t2 := read_ref($t1)
            $t2 := $LoadU256($t1)
            // return $t2
            $result := $t2
        }

        function A1_Signer_borrow_address(signer_ref) -> addr_ref {
          addr_ref := signer_ref
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of NativeFunctions::test_signer_address_of: Succeed(Stopped) (used_gas=345): []
