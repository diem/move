/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x640f7372
                {
                    // test_is_approved_for_all()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_test_is_approved_for_all()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xe88da6c6
                {
                    // test_multi_ret()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0, ret_1 := A2_M_test_multi_ret()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256___uint256$_$vec$A2_U256_U256$_A2_U256_U256$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x221ea1ee
                {
                    // test_no_para()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_test_no_para()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb930a1da
                {
                    // test_safe_transfer_from(uint128,uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint128_uint128$_$u128_u128$(4, calldatasize())
                    A2_M_test_safe_transfer_from(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_is_approved_for_all() -> $result {
                let account, contract_addr, operator, $t3, $t4, $t5, $t6
                // $t3 := 0x3
                $t3 := 0x3
                // $t4 := 0x4
                $t4 := 0x4
                // $t5 := 0x5
                $t5 := 0x5
                // $t6 := M::is_approved_for_all($t3, $t4, $t5)
                $t6 := A2_M_is_approved_for_all($t3, $t4, $t5)
                // return $t6
                $result := $t6
            }

            function A2_M_test_multi_ret() -> $result0, $result1 {
                let contract_addr, data, v, $t3, $t4, $t5, $t6, $t7
                // $t3 := 0
                $t3 := 0
                // $t4 := Vector::empty<U256::U256>()
                $t4 := A1_Vector_empty$A2_U256_U256$()
                // $t5 := 0x3
                $t5 := 0x3
                // ($t6, $t7) := M::multi_ret($t5, $t3, $t4)
                $t6, $t7 := A2_M_multi_ret($t5, $t3, $t4)
                // return ($t6, $t7)
                $result0 := $t6
                $result1 := $t7
            }

            function A2_M_test_no_para() {
                let contract_addr, $t1
                // $t1 := 0x3
                $t1 := 0x3
                // M::no_para($t1)
                A2_M_no_para($t1)
                // return ()
            }

            function A2_M_test_safe_transfer_from(x, y) {
                let contract_addr, data, from_addr, to_addr, token_id, $t7, $t8, $t9, $t10, $t11
                // $t7 := (u256)($t0, $t1)
                $t7 := $CastU256(x, y)
                // $t8 := Vector::empty<u8>()
                $t8 := A1_Vector_empty$u8$()
                // $t9 := 0x3
                $t9 := 0x3
                // $t10 := 0x4
                $t10 := 0x4
                // $t11 := 0x5
                $t11 := 0x5
                // M::safe_transfer_form($t9, $t10, $t11, $t7, $t8)
                A2_M_safe_transfer_form($t9, $t10, $t11, $t7, $t8)
                // return ()
            }

            function A2_M_safe_transfer_form(contract, from, to, tokenId, data) {
                if iszero(extcodesize(contract)) { $Abort(91) }
                // storage for arguments and returned data
                let $t5 := mload(0)
                mstore($t5, $Shl(0xb88d4fde, 224))
                let $t6 := abi_encode_tuple_$address_address_uint256_bytes$_$address_address_A2_U256_U256_vec$u8$$(add($t5, 4), from, to, tokenId, data)
                let $t7 := call(gas(), contract, 0,  $t5, sub($t6, $t5), $t5, 0)
                if iszero($t7) { $RevertForward() }
                if $t7 {
                    // update freeMemoryPointer according to dynamic return size
                    $MallocAt($t5, returndatasize())
                    // decode return parameters from external try-call into retVars
                    abi_decode_tuple___from_memory($t5, add($t5, returndatasize()))
                }
            }
            function A1_Vector_empty$u8$() -> vector {
                vector := $Malloc(34)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function A2_M_no_para(contract) {
                if iszero(extcodesize(contract)) { $Abort(91) }
                // storage for arguments and returned data
                let $t1 := mload(0)
                mstore($t1, $Shl(0x48050dbe, 224))
                let $t2 := abi_encode_tuple__(add($t1, 4))
                let $t3 := call(gas(), contract, 0,  $t1, sub($t2, $t1), $t1, 0)
                if iszero($t3) { $RevertForward() }
                if $t3 {
                    // update freeMemoryPointer according to dynamic return size
                    $MallocAt($t1, returndatasize())
                    // decode return parameters from external try-call into retVars
                    abi_decode_tuple___from_memory($t1, add($t1, returndatasize()))
                }
            }
            function A2_M_multi_ret(contract, v, vec) -> $result0, $result1  {
                // storage for arguments and returned data
                let $t3 := mload(0)
                mstore($t3, $Shl(0xe520b193, 224))
                let $t4 := abi_encode_tuple_$uint256_uint256__$_$A2_U256_U256_vec$A2_U256_U256$$(add($t3, 4), v, vec)
                let $t5 := call(gas(), contract, 0,  $t3, sub($t4, $t3), $t3, 0)
                if iszero($t5) { $RevertForward() }
                if $t5 {
                    // copy dynamic return data out
                    returndatacopy($t3, 0, returndatasize())
                    // update freeMemoryPointer according to dynamic return size
                    $MallocAt($t3, returndatasize())
                    // decode return parameters from external try-call into retVars
                    $result0, $result1 := abi_decode_tuple_$uint256___uint256$_$vec$A2_U256_U256$_A2_U256_U256$_from_memory($t3, add($t3, returndatasize()))
                }
            }
            function A1_Vector_empty$A2_U256_U256$() -> vector {
                vector := $Malloc(96)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function A2_M_is_approved_for_all(contract, account, operator) -> $result  {
                // storage for arguments and returned data
                let $t3 := mload(0)
                mstore($t3, $Shl(0xe985e9c5, 224))
                let $t4 := abi_encode_tuple_$address_address$_$address_address$(add($t3, 4), account, operator)
                let $t5 := call(gas(), contract, 0,  $t3, sub($t4, $t3), $t3, 32)
                if iszero($t5) { $RevertForward() }
                if $t5 {
                    // update freeMemoryPointer according to dynamic return size
                    $MallocAt($t3, returndatasize())
                    // decode return parameters from external try-call into retVars
                    $result := abi_decode_tuple_$bool$_$bool$_from_memory($t3, add($t3, returndatasize()))
                }
            }
            function abi_decode_tuple_$bool$_$bool$_from_memory(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_bool_from_memory(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bool_from_memory(offset, end) -> value {
                value := mload(offset)
                validator_bool(value)
            }
            function validator_bool(value) {
                if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_encode_tuple_$address_address$_$address_address$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_address(value_0, add(headStart, 0))
                abi_encode_address(value_1, add(headStart, 32))
            }
            function abi_encode_address(value, pos) {
                mstore(pos, cleanup_address(value))
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$uint256___uint256$_$vec$A2_U256_U256$_A2_U256_U256$_from_memory(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := mload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint256___vec$A2_U256_U256$_from_memory(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint256_from_memory(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256_from_memory(offset, end) -> value {
                value := mload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_uint256___vec$A2_U256_U256$_from_memory(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := mload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__uint256___vec$A2_U256_U256$_from_memory(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint256___vec$A2_U256_U256$_from_memory(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), length)
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint256_from_memory(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_encode_tuple_$uint256_uint256__$_$A2_U256_U256_vec$A2_U256_U256$$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint256(value_0, add(headStart, 0))
                mstore(add(headStart, 32), sub(tail, headStart))
                tail := abi_encode_uint256___vec$A2_U256_U256$(value_1,  tail)
            }
            function abi_encode_uint256___vec$A2_U256_U256$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let v := $MemoryLoadU256(src)
                    pos := abi_encode_uint256_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint256_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint256(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function abi_decode_tuple___from_memory(headStart, dataEnd) {
                if slt(sub(dataEnd, headStart), 0) { $Abort(96) }
            }
            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_encode_tuple_$address_address_uint256_bytes$_$address_address_A2_U256_U256_vec$u8$$(headStart ,value_0, value_1, value_2, value_3) -> tail {
                tail := add(headStart, 128)
                abi_encode_address(value_0, add(headStart, 0))
                abi_encode_address(value_1, add(headStart, 32))
                abi_encode_uint256(value_2, add(headStart, 64))
                mstore(add(headStart, 96), sub(tail, headStart))
                tail := abi_encode_bytes(value_3,  tail)
            }
            function abi_encode_bytes(value, pos) -> end{
                let size := $MemoryLoadU64(value)
                mstore(pos, size)
                pos := add(pos, 0x20)
                $CopyMemoryU8(add(value, 0x20), pos, size)
                let size_roundup := $RoundUp(size)
                end := add(pos, size_roundup)
            }
            function abi_decode_tuple_$uint128_uint128$_$u128_u128$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$uint256___uint256$_$vec$A2_U256_U256$_A2_U256_U256$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint256___vec$A2_U256_U256$(value_0,  tail)
                abi_encode_uint256(value_1, add(headStart, 32))
            }
            function abi_encode_tuple_$bool$_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $RevertForward() {
              let pos := mload(0)
              returndatacopy(pos, 0, returndatasize())
              revert(pos, returndatasize())
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $MallocAt(offs, size) {
              let new_free_ptr := add(offs, $RoundUp(size))
              // protect against overflow
              if or(gt(new_free_ptr, 0xffffffffffffffff), lt(new_free_ptr, offs)) { $AbortBuiltin() }
              mstore(0, new_free_ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $CopyMemoryU8(src, dst, size) {
              let i := 0
              for { } lt(i, size) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if gt(i, size)
              {
                  for {let j := i} lt(j, size) {j := add(j, 1)} {
                    mstore8(add(dst, j), 0)
                  }
              }
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $Shl(x, y) -> r {
              r := shl(y, x)
            }
            function $CastU256(hi, lo) -> r {
                if gt(hi, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                if gt(lo, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                r := add(shl(128, hi), lo)
            }
            function $RoundUp(value) -> result {
                result := and(add(value, 31), not(31))
            }
        }
    }
}


!! Succeeded compiling Yul
